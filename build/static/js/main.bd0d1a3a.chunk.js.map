{"version":3,"sources":["components/slides/options.js","components/slides/index.js","App.js","serviceWorker.js","index.js"],"names":["id","className","data","x","y","content","style","textDecoration","scale","rotateZ","sort","Math","random","map","staff","index","gap","ceil","z","floor","rotateX","rotateY","Index","progress","options","opt","React","createElement","Step","key","child","cloneElement","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bd0d1a3a.chunk.js","sourcesContent":["import React from 'react';\n\nconst getStaffs = () => {\n\n    const staffs = [\n        'Aishan Shrestha',\n        'Bijay Runiyar',\n        'Diwan Adhikari',\n        'Prashant Shrestha',\n        'Praveen Sharma',\n        'Pritishma Tuladhar',\n        'Sanchita Tiwari',\n        'Saroz K. Poddar',\n        'Shekhar K. Sharma',\n    ]\n\n    let staff = '';\n    const opts = staffs.sort(() => Math.random() - 0.5).map((staff, index)  => {\n        const gap = index * Math.ceil(Math.random() * 1000);\n        const rotate = Math.ceil(Math.random() * 400);\n        const scale = Math.floor(Math.random() * (30 - 3 + 1) + 3);\n        return {\n            id: 'staff_' + index,\n            className: \"staffs\",\n            data: {\n              x:1400 + gap,\n              y:2200 + gap,\n              z:-3000,\n              rotateZ: rotate,\n              scale: scale,\n            },\n            content: [\n                <p>{staff}</p>,\n            ]\n        }\n    });\n    return opts;\n}\n\nexport default [\n  {\n      id: \"start\",\n      className:\"slide brand\",\n      data:{\n          x:1000,\n          y:-1500,\n      },\n      content:[\n          <p className=\"brand-of\">Welcom to <h3 style={{textDecoration: 'line-through'}}>Jumanji</h3></p>,\n          <h2 className=\"try\"><strong>Catch</strong> Up <strong>Time</strong></h2>\n      ]\n  },\n  {\n      id:\"title\",\n      className:\"circle\",\n          data:{\n          scale: 2\n      },\n      content:[\n          <span className=\"try\">New way to report - </span>,\n          <h1>Randomly<sup></sup></h1>,\n          <span className=\"footnote\">called names</span>\n      ]\n  },\n  {\n      id: \"its\",\n      data:{\n          x:850,\n          y:3000,\n          rotateZ:90,\n          scale:5\n      },\n      content:[\n          <p><strong>What are you working on</strong> <br/>\n          any <a>any blocks?</a> <br/>\n          pss, next <strong>please</strong>?</p>\n      ]\n  },\n  {\n      id: \"big\",\n      data:{\n          x:3500,\n          y:2100,\n          rotateZ:180,\n          scale:1\n      },\n      content:[\n          <p>starting <b>now</b> <span className=\"thoughts\">...</span></p>\n      ]\n  },\n    ...getStaffs(),\n {\n      id: \"one-more-thing\",\n      data:{\n          x:6000,\n          y:4000,\n          scale:2\n      },\n      content:[\n          <p>one more thing...</p>\n      ]\n  },\n  {\n      id: \"qsts\",\n      data:{\n          x:6200,\n          y:4300,\n          z:-100,\n          rotateX:-40,\n          rotateY:10,\n          scale:2\n      },\n      content:[\n          <p><span className=\"have\">Anybody</span> <span className=\"you\">has</span> <span className=\"noticed\">any</span> <b>questions<sup>*</sup></b>?</p>\n      ]\n  },\n  {\n      id: \"okthen\",\n      className: \"opacity\",\n      data:{\n          x:6200,\n          y:4500,\n          z:-100,\n          rotateX:-40,\n          rotateY:10,\n          scale:3\n      },\n      content:[\n          <span className=\"footnote\">* nope? all-righty then ;)</span>\n      ]\n  },  {\n      id: \"thankyou\",\n      className:\"step opacity\",\n      data:{\n          x:3000,\n          y:1500,\n          z:0,\n          scale:10\n      },\n      content:[\n          <h2><br /><br /><br /><strong>Thank</strong> you</h2>\n      ]\n  }\n];","import React from 'react';\nimport {Impress, Step} from 'react-impressjs';\nimport 'react-impressjs/styles/react-impressjs.css';\n\nimport './slides.css';\nimport options from './options';\n\nconst Index = () => {\n    return (\n        <Impress progress={true}>\n      {\n        options.map( (opt, index ) => {\n          return (\n            React.createElement( Step, {\n              id: opt.id,\n              className: opt.className,\n              data: opt.data,\n              key: index\n            },\n\n            opt.content.map( (child, index) => {\n              return (\n                React.cloneElement( child, {\n                  id: child.id,\n                  className: child.className,\n                  key: index\n                })\n              );\n            }))\n          );\n        })\n      }\n      </Impress>\n    );\n}\n\nexport { Index };","import React from 'react';\n\nimport { Index } from './components/slides';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Index />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
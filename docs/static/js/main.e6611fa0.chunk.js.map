{"version":3,"sources":["components/slides/options.js","components/slides/index.js","components/btn/index.js","components/lists/index.js","App.js","serviceWorker.js","index.js"],"names":["logoUrl","process","staffs","friday","className","aria-label","role","lastPage","Date","toDateString","indexOf","options","id","data","x","y","scale","content","src","alt","length","rotateZ","style","textAlign","sort","Math","random","map","staff","index","z","rotateY","rotateX","rootOptions","width","height","maxScale","minScale","perspective","transitionDuration","Slides","progress","rootData","hint","opt","React","createElement","Step","key","child","cloneElement","Button","text","to","IconLink","children","List","ActiveParticipants","keyId","uuidv4","type","htmlFor","App","path","exact","Boolean","window","location","hostname","match","localforage","config","driver","WEBSQL","name","version","size","storeName","description","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e6611fa0.chunk.js","sourcesContent":["import React from \"react\";\n// import logo from '../../../public/color-logo.svg';\nconst logoUrl = `${process.env.PUBLIC_URL}/color-logo.svg`;\n\n\nconst staffs = [\n  'Bijay',\n  'Diwan',\n  'Shyam',\n  'Sanchita',\n  'Shekhar',\n  'Suman',\n  'Niranjan',\n  'Praveen',\n  'Sunil',\n  'Kapoor',\n  'Basanta',\n  'Bibek',\n  'Sandesh',\n  'Prajwol'\n];\n\nconst friday = <div className=\"stepbox stepbox--large\"><h2 className=\"tgif\">TGIF </h2><br /><span className=\"em-1\" aria-label=\"Party Gilter\" role=\"img\">üéâ</span>&nbsp;&nbsp;<span className=\"em-2\" aria-label=\"Party Balloons\" role=\"img\">üéä</span>&nbsp;&nbsp;<span className=\"em-3\" aria-label=\"Party Beer\" role=\"img\">üçª</span>&nbsp;&nbsp;<span className=\"em-4\" aria-label=\"Pingpong\" role=\"img\">üèì</span></div>;\n\nconst isFriday = (new Date()).toDateString().indexOf('Fri') >= 0;\n\nconst lastPage = isFriday ? friday : <h2>Thank You</h2>\n\nconst getStaffs = () => {\n  const opts = staffs\n    .sort(() => Math.random() - 0.5)\n    .map((staff, index) => {\n\n      return {\n        id: \"staff_\" + index,\n        className: \"staffs\",\n        data: {\n          x: 2100 + (index * 3 + 210), //+ gap,\n          y: 1100 + (index * 150), //+ gap,\n          z: -2000,\n          rotateY: 30 + (index * 3 + 210),\n          rotateX: 120 + (index * 1 + 210),\n          scale: 1.8,\n        },\n        content: [\n          <><div className=\"stepbox\"><h2> {staff} </h2></div></>,\n        ],\n      };\n    });\n\n  return opts;\n};\n\nconst options = [\n  {\n    id: \"start\",\n    className: \"slide brand\",\n    data: {\n      x: 300,\n      y: -200,\n      scale: 2,\n    },\n    content: [\n      <img src={logoUrl} alt=\"Optimum Futurist\" />,\n      <p className=\"brand-of\">Daily</p>,\n      <h2 className=\"try\">\n        Scrum\n      </h2>,\n      <p>Total Attendees: #{staffs.length}</p>\n    ],\n  },\n  {\n    id: \"its\",\n    data: {\n      x: 850,\n      y: 3000,\n      rotateZ: 90,\n      scale: 5,\n    },\n    content: [\n      <p style={{ textAlign: \"left\" }}>\n        How to report? <br />\n        <strong> - Describe what you're working on</strong> <br />\n        and - <span className=\"btn-block\">inform any roadblocks?</span> <br />\n      </p>,\n    ],\n  },\n  ...getStaffs(),\n  {\n    id: \"qsts\",\n    data: {\n      x: 6200,\n      y: 4300,\n      z: -100,\n      rotateX: -40,\n      rotateY: 10,\n      scale: 10,\n    },\n    content: [\n      <h1>\n        <strong>\n          <span className=\"have\">Q</span>\n        </strong>\n        <span className=\"you\">&</span>\n        <span className=\"noticed\">A</span>\n      </h1>,\n    ],\n  },\n  {\n    id: \"thankyou\",\n    className: \"step opacity large-title\",\n    data: {\n      x: 3000,\n      y: 500,\n      z: 0,\n      scale: 3,\n    },\n    content: [\n      <>{lastPage}</>,\n    ],\n  },\n];\n\nexport default options;\nexport { staffs, getStaffs };\n","import React from 'react';\nimport {Impress, Step} from 'react-impressjs';\nimport 'react-impressjs/styles/react-impressjs.css';\n\n\nimport './slides.css';\nimport options from './options';\n\nconst rootOptions = {\n    width: 1600,\n    height: 900,\n    maxScale: 1,\n    minScale: 0,\n    perspective: 1400,\n    transitionDuration: 1000\n};\n\nconst Slides = () => {\n    return (\n      <Impress progress={true} rootData={rootOptions} hint={true}>\n        {\n          options.map( (opt, index ) => {\n            return (\n              React.createElement( Step, {\n                id: opt.id,\n                className: opt.className,\n                data: opt.data,\n                key: index\n              },\n\n              opt.content.map( (child, index) => {\n                return (\n                  React.cloneElement( child, {\n                    id: child.id,\n                    className: child.className,\n                    key: index\n                  })\n                );\n              }))\n            );\n          })\n        }\n      </Impress>\n    );\n}\n\nexport { Slides };","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Button = ({text, to}) => {\n  return (\n    <Link className=\"pushable\" to={to}>\n      <span className=\"shadow\"></span>\n      <span className=\"edge\"></span>\n      <span className=\"front\">{text}</span>\n    </Link>\n  );\n}\n\nconst IconLink = ({className, children, to}) => {\n  return (\n    <Link className={className} to={to}>{children}</Link>\n  );\n}\n\nexport { Button, IconLink };","import React from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nimport { Button } from '../btn'\nimport \"./list.css\";\nimport { staffs } from \"../slides/options\";\n\nconst List = () => {\n  const ActiveParticipants = staffs.map((staff) => {\n    const keyId = uuidv4();\n\n    return (\n      <li className=\"item\" key={keyId}>\n        <input id={keyId} type=\"checkbox\" />\n        <label htmlFor={keyId}>{staff}</label>\n      </li>\n    );\n  });\n\n  return (\n    <section className=\"list-view page\">\n      <h1 className=\"title\">Choose Attendees</h1>\n      <ul className=\"inbox\">{ActiveParticipants}</ul>\n      <Button to=\"/\" text=\"Return\" />\n    </section>\n  );\n};\n\nexport { List };\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport { Slides } from \"./components/slides\";\nimport { List } from \"./components/lists\";\nimport { Button, IconLink } from './components/btn'\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Switch>\n          <Route path=\"/list\" exact>\n            <List />\n          </Route>\n          <Route path=\"/\">\n            <Slides />\n          </Route>\n          <Route>\n            <section className=\"page\">\n              <div className=\"page-card\">\n                <h1 className=\"title\">Not Found</h1>\n                <Button to=\"/\" text=\"Go Home\" />\n              </div>\n            </section>\n          </Route>\n        </Switch>\n        <IconLink to=\"/list\" className=\"pinned\"><span role=\"img\" aria-label=\"Settings\">‚öôÔ∏è</span></IconLink>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport localforage from 'localforage';\n\nlocalforage.config({\n  driver      : localforage.WEBSQL, // Force WebSQL; same as using setDriver()\n  name        : 'OptimumScrum',\n  version     : 2.0,\n  size        : 4980736, // Size of database, in bytes. WebSQL-only for now.\n  storeName   : '_attendees', // Should be alphanumeric, with underscores.\n  description : 'Attendees list for participants and absentees'\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
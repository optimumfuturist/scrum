{"version":3,"sources":["constants.js","components/slides/options.js","components/slides/index.js","components/btn/index.js","components/lists/index.js","App.js","serviceWorker.js","index.js"],"names":["LF_KEYS","logoUrl","process","friday","className","aria-label","role","lastPage","Date","toDateString","indexOf","makeSteps","persons","id","data","x","y","content","src","alt","length","style","textAlign","sort","Math","random","map","staff","index","name","getPersons","scale","rotateZ","z","rootOptions","width","height","maxScale","minScale","perspective","transitionDuration","Slides","useState","setPersons","history","useHistory","useEffect","localforage","getItem","then","v","push","allSteps","progress","rootData","hint","opt","React","createElement","Step","key","child","cloneElement","Button","text","to","onClick","e","IconLink","children","List","Array","isArray","ActiveParticipants","keyId","uuidv4","htmlFor","removePerson","type","updateStore","arr","setItem","filteredPersons","filter","person","title","prompt","allPersons","App","basename","path","exact","Boolean","window","location","hostname","match","config","description","values","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9b97b056.chunk.js","sourcesContent":["/** CONSTANTS */\n\nconst LF_KEYS = {\n  PERSONS: 'persons'\n};\n\nexport { LF_KEYS };","import React from \"react\";\nconst logoUrl = `${process.env.PUBLIC_URL}/color-logo.svg`;\n\nconst friday = (\n  <div className=\"stepbox stepbox--large\">\n    <h2 className=\"tgif\">TGIF </h2>\n    <br />\n    <span className=\"em-1\" aria-label=\"Party Gilter\" role=\"img\">\n      üéâ\n    </span>\n    &nbsp;&nbsp;\n    <span className=\"em-2\" aria-label=\"Party Balloons\" role=\"img\">\n      üéä\n    </span>\n    &nbsp;&nbsp;\n    <span className=\"em-3\" aria-label=\"Party Beer\" role=\"img\">\n      üçª\n    </span>\n    &nbsp;&nbsp;\n    <span className=\"em-4\" aria-label=\"Pingpong\" role=\"img\">\n      üèì\n    </span>\n  </div>\n);\n\nconst isFriday = new Date().toDateString().indexOf(\"Fri\") >= 0;\n\nconst lastPage = isFriday ? friday : <h2>Thank You</h2>;\n\nconst getPersons = (persons) => {\n  const opts = persons\n    .sort(() => Math.random() - 0.5)\n    .map((staff, index) => {\n      return {\n        id: \"staff_\" + index,\n        className: \"persons\",\n        data: {\n          x: 0,\n          y: 0 + index * 40, //+ gap,\n        },\n        content: [\n          <>\n            <div className=\"stepbox\">\n              <h2> {staff.name} </h2>\n            </div>\n          </>,\n        ],\n      };\n    });\n\n  return opts;\n};\n\nconst makeSteps = (persons) => {\n  if (!persons) return;\n\n  const obj = [\n    {\n      id: \"start\",\n      className: \"slide brand\",\n      data: {\n        x: -1400,\n        y: -1500,\n      },\n      content: [\n        <img src={logoUrl} alt=\"Optimum Futurist\" />,\n        <p className=\"brand-of\">Daily</p>,\n        <h2 className=\"try\">Scrum</h2>,\n        <p>Total Attendees: #{persons.length}</p>,\n      ],\n    },\n    {\n      id: \"its\",\n      data: {\n        x: 0,\n        y: -1500,\n      },\n      content: [\n        <p style={{ textAlign: \"left\" }}>\n          How to report? <br />\n          <strong> - Describe what you're working on</strong> <br />\n          and - <span className=\"btn-block\">inform any roadblocks?</span> <br />\n        </p>,\n      ],\n    },\n    ...getPersons(persons),\n    {\n      id: \"qsts\",\n      data: {\n        x: 1200,\n        y: 500,\n        scale: 4,\n        rotateZ: 90\n      },\n      content: [\n        <h1>\n          <strong>\n            <span className=\"have\">Any</span>\n          </strong>\n          <span className=\"noticed\">&nbsp;Questions?</span>\n        </h1>,\n      ],\n    },\n    {\n      id: \"thankyou\",\n      className: \"step opacity large-title\",\n      data: {\n        x: 3000,\n        y: 1500,\n        z: 0,\n        scale: 3,\n      },\n      content: [<>{lastPage}</>],\n    },\n  ];\n  return obj;\n};\n\nexport default makeSteps;\n","import React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { Impress, Step } from \"react-impressjs\";\nimport \"react-impressjs/styles/react-impressjs.css\";\nimport localforage from \"localforage\";\nimport { LF_KEYS } from \"../../constants\";\n\nimport \"./slides.css\";\nimport makeSteps from \"./options\";\n\nconst rootOptions = {\n  width: 1600,\n  height: 900,\n  maxScale: 1,\n  minScale: 0,\n  perspective: 1400,\n  transitionDuration: 1000,\n};\n\nconst Slides = () => {\n  const [persons, setPersons] = useState([]);\n  let history = useHistory();\n\n\n  useEffect(() => {\n    localforage.getItem(LF_KEYS.PERSONS).then((v) => {\n      setPersons(v);\n      if(!v || v.length === 0) {\n        history.push('/list');\n      }\n\n    });\n  }, []);\n\n  const allSteps = makeSteps(persons);\n  \n  \n  if(!persons || persons.length === 0) {\n    return <div>Loading</div>\n  } \n\n  return (\n    <Impress progress={true} rootData={rootOptions} hint={true}>\n      {allSteps.map((opt, index) => {\n        return React.createElement(\n          Step,\n          {\n            id: opt.id,\n            className: opt.className,\n            data: opt.data,\n            key: index,\n          },\n\n          opt.content.map((child, index) => {\n            return React.cloneElement(child, {\n              id: child.id,\n              className: child.className,\n              key: index,\n            });\n          })\n        );\n      })}\n    </Impress>\n  );\n};\n\nexport { Slides };\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Button = ({ text, to, onClick }) => {\n  if (!to) {\n    return (\n      <button className=\"pushable sec\" onClick={e => onClick(e)}>\n        <span className=\"shadow\"></span>\n        <span className=\"edge\"></span>\n        <span className=\"front\">{text}</span>\n      </button>\n    );\n  }\n  return (\n    <Link className=\"pushable\" to={to}>\n      <span className=\"shadow\"></span>\n      <span className=\"edge\"></span>\n      <span className=\"front\">{text}</span>\n    </Link>\n  );\n};\n\nconst IconLink = ({ className, children, to }) => {\n  return (\n    <Link className={className} to={to}>\n      {children}\n    </Link>\n  );\n};\n\nexport { Button, IconLink };\n","import React, { useEffect, useState } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport localforage from \"localforage\";\n\nimport { LF_KEYS } from '../../constants';\nimport { Button } from \"../btn\";\nimport \"./list.css\";\n\nconst List = () => {\n  const [persons, setPersons] = useState([]);\n\n  useEffect(() => {\n    localforage.getItem(LF_KEYS.PERSONS).then(v => {\n      if(Array.isArray(v)) setPersons(v);\n    });\n  }, []);\n\n  const ActiveParticipants = persons.map((staff) => {\n    const keyId = uuidv4();\n\n    return (\n      <li className=\"item\" key={keyId}>\n        <label htmlFor={keyId}>{staff.name}</label>\n        <button className=\"btn-remove\" onClick={() => removePerson(staff.id)} id={keyId} type=\"button\">&times;</button>\n      </li>\n    );\n  });\n\n  const updateStore = arr => {\n    localforage.setItem(LF_KEYS.PERSONS, arr).then(v => {\n      setPersons(v);\n    });\n  };\n\n  const removePerson = id => {\n    const filteredPersons = persons.filter(person => person.id !== id)\n    updateStore(filteredPersons);\n  }\n\n  const addPerson = () => {\n    const name = prompt();\n\n    if(!name) return;\n    const allPersons = [...persons, {name, id: persons.length + 1 }];\n    updateStore(allPersons);\n  };\n\n  return (\n    <section className=\"list-view page\">\n      <h1 className=\"title\">Attendees</h1>\n      <ul className=\"inbox\">{!persons.length && <li className=\"item\"><label title=\"No one available\">No one available</label></li>}</ul>\n      <ul className=\"inbox\">{ActiveParticipants}</ul>\n      <div className=\"btn-wrap\">\n        { persons.length > 0 && <Button to=\"/\" text=\"Start Meeting\" />}\n        <Button text=\"Add\" onClick={addPerson} />\n      </div>\n    </section>\n  );\n};\n\nexport { List };\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport { Slides } from \"./components/slides\";\nimport { List } from \"./components/lists\";\nimport { Button, IconLink } from './components/btn'\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <Router basename=\"/scrum\">\n      <div className=\"App\">\n        <IconLink to=\"/list\" className=\"pinned\"><span role=\"img\" aria-label=\"Settings\">‚öôÔ∏è</span></IconLink>\n        <Switch>\n          <Route path=\"/list\" exact>\n            <List />\n          </Route>\n          <Route path=\"/\">\n            <Slides />\n          </Route>\n          <Route>\n            <section className=\"page\">\n              <div className=\"page-card\">\n                <h1 className=\"title\">Not Found</h1>\n                <Button to=\"/\" text=\"Go Home\" />\n              </div>\n            </section>\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport localforage from 'localforage';\nimport { LF_KEYS } from './constants';\n\nlocalforage.config({\n  name        : 'of.scrum',\n  description : 'Attendees list for participants and absentees'\n});\n\nlocalforage.getItem(LF_KEYS.PERSONS).then(values => {\n  const persons = values;\n  if (!persons) {\n    localforage.setItem(LF_KEYS.PERSONS, []);\n  }\n});\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
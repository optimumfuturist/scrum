{"version":3,"sources":["components/slides/options.js","components/slides/index.js","App.js","serviceWorker.js","index.js"],"names":["staffs","options","id","className","data","x","y","scale","content","rotateZ","sort","Math","random","map","staff","index","gap","ceil","z","floor","rotateX","rotateY","rootOptions","width","height","maxScale","minScale","perspective","transitionDuration","Slides","progress","rootData","hint","opt","React","createElement","Step","key","child","cloneElement","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mRAEMA,EAAS,CACX,kBACA,gBACA,iBACA,oBACA,iBACA,qBACA,kBACA,kBACA,qBA+GWC,EArFF,CACT,CACIC,GAAI,QACJC,UAAW,cACXC,KAAM,CACFC,EAAG,IACHC,GAAI,KACJC,MAAO,GAEXC,QAAS,CACL,uBAAGL,UAAU,YAAb,cACA,wBAAIA,UAAU,OAAM,yCAApB,YAGR,CACID,GAAI,QACJC,UAAW,SACXC,KAAM,CACFG,MAAO,GAEXC,QAAS,CACL,0BAAML,UAAU,OAAhB,wBACA,uCAAY,+BACZ,0BAAMA,UAAU,YAAhB,kBAGR,CACID,GAAI,MACJE,KAAM,CACFC,EAAG,IACHC,EAAG,IACHG,QAAS,GACTF,MAAO,GAEXC,QAAS,CACL,2BAAG,2DAAH,IAA4C,6BAA5C,OACQ,0CADR,IAC2B,6BAD3B,aAEc,0CAFd,QAnCC,mBApBIR,EAAOU,MAAK,kBAAMC,KAAKC,SAAW,MAAKC,KAAI,SAACC,EAAOC,GAC5D,IAAMC,EAAMD,EAAQJ,KAAKM,KAAqB,IAAhBN,KAAKC,UAEnC,MAAO,CACHV,GAAI,SAAWa,EACfZ,UAAW,SACXC,KAAM,CACFC,EAAG,KAAOW,EACVV,EAAG,KAAOU,EACVE,GAAI,IACJX,MARMI,KAAKQ,MAAM,GAAAR,KAAKC,SAA0B,IAUpDJ,QAAS,CACL,4BAAKM,SAOR,CAyCT,CACIZ,GAAI,OACJE,KAAM,CACFC,EAAG,KACHC,EAAG,KACHY,GAAI,IACJE,SAAU,GACVC,QAAS,GACTd,MAAO,GAEXC,QAAS,CACL,4BAAI,0BAAML,UAAU,QAAhB,WAAJ,IAA0C,0BAAMA,UAAU,OAAhB,OAA1C,IAA2E,0BACvEA,UAAU,WAD6D,OAA3E,IACmC,uCAAY,mCAD/C,OAIR,CACID,GAAI,SACJC,UAAW,UACXC,KAAM,CACFC,EAAG,KACHC,EAAG,IACHY,GAAI,IACJE,SAAU,GACVC,QAAS,GACTd,MAAO,GAEXC,QAAS,CACL,0BAAML,UAAU,YAAhB,gCAEL,CACCD,GAAI,WACJC,UAAW,eACXC,KAAM,CACFC,EAAG,IACHC,EAAG,IACHY,EAAG,EACHX,MAAO,IAEXC,QAAS,CACL,4BAAI,6BAAK,6BAAK,6BAAK,yCAAnB,YC9GNc,EAAc,CAChBC,MAAO,KACPC,OAAQ,IACRC,SAAU,EACVC,SAAU,EACVC,YAAa,IACbC,mBAAoB,KAGlBC,EAAS,WACX,OACI,kBAAC,UAAD,CAASC,UAAU,EAAMC,SAAUT,EAAaU,MAAM,GAEtD/B,EAAQY,KAAK,SAACoB,EAAKlB,GACjB,OACEmB,IAAMC,cAAeC,OAAM,CACzBlC,GAAI+B,EAAI/B,GACRC,UAAW8B,EAAI9B,UACfC,KAAM6B,EAAI7B,KACViC,IAAKtB,GAGPkB,EAAIzB,QAAQK,KAAK,SAACyB,EAAOvB,GACvB,OACEmB,IAAMK,aAAcD,EAAO,CACzBpC,GAAIoC,EAAMpC,GACVC,UAAWmC,EAAMnC,UACjBkC,IAAKtB,a,MCrBRyB,MARf,WACE,OACE,yBAAKrC,UAAU,OACb,kBAAC,EAAD,QCIcsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.97e81a89.chunk.js","sourcesContent":["import React from 'react';\n\nconst staffs = [\n    'Aishan Shrestha',\n    'Bijay Runiyar',\n    'Diwan Adhikari',\n    'Prashant Shrestha',\n    'Praveen Sharma',\n    'Pritishma Tuladhar',\n    'Sanchita Tiwari',\n    'Saroz K. Poddar',\n    'Shekhar K. Sharma',\n];\n\nconst getStaffs = () => {\n\n    let staff = '';\n    const opts = staffs.sort(() => Math.random() - 0.5).map((staff, index) => {\n        const gap = index * Math.ceil(Math.random() * 1000);\n        const scale = Math.floor(Math.random() * (15 - 6 + 1) + 6);\n        return {\n            id: 'staff_' + index,\n            className: \"staffs\",\n            data: {\n                x: 1100 + gap,\n                y: 1100 + gap,\n                z: -2000,\n                scale: scale,\n            },\n            content: [\n                <h2>{staff}</h2>,\n            ]\n        }\n    });\n    return opts;\n}\n\nconst options = [\n    {\n        id: \"start\",\n        className: \"slide brand\",\n        data: {\n            x: 1000,\n            y: -1500,\n            scale: 2\n        },\n        content: [\n            <p className=\"brand-of\">Welcome to</p>,\n            <h2 className=\"try\"><strong>Daily</strong> Scrum</h2>\n        ]\n    },\n    {\n        id: \"title\",\n        className: \"circle\",\n        data: {\n            scale: 2\n        },\n        content: [\n            <span className=\"try\">New way to report - </span>,\n            <h1>Randomly<sup></sup></h1>,\n            <span className=\"footnote\">called names</span>\n        ]\n    },\n    {\n        id: \"its\",\n        data: {\n            x: 850,\n            y: 3000,\n            rotateZ: 90,\n            scale: 5\n        },\n        content: [\n            <p><strong>What are you working on</strong> <br/>\n                any <a>any blocks?</a> <br/>\n                pss, next <strong>please</strong>?</p>\n        ]\n    },\n    ...getStaffs(),\n    {\n        id: \"qsts\",\n        data: {\n            x: 6200,\n            y: 4300,\n            z: -100,\n            rotateX: -40,\n            rotateY: 10,\n            scale: 2\n        },\n        content: [\n            <h1><span className=\"have\">Anybody</span> <span className=\"you\">has</span> <span\n                className=\"noticed\">any</span> <b>questions<sup>*</sup></b>?</h1>\n        ]\n    },\n    {\n        id: \"okthen\",\n        className: \"opacity\",\n        data: {\n            x: 6200,\n            y: 5000,\n            z: -100,\n            rotateX: -40,\n            rotateY: 10,\n            scale: 4\n        },\n        content: [\n            <span className=\"footnote\">* nope? all-righty then ;)</span>\n        ]\n    }, {\n        id: \"thankyou\",\n        className: \"step opacity\",\n        data: {\n            x: 3000,\n            y: 500,\n            z: 0,\n            scale: 10\n        },\n        content: [\n            <h2><br/><br/><br/><strong>Thank</strong> you</h2>\n        ]\n    }\n];\n\nexport default options;\nexport {staffs, getStaffs};","import React from 'react';\nimport {Impress, Step} from 'react-impressjs';\nimport 'react-impressjs/styles/react-impressjs.css';\n\nimport './slides.css';\nimport options from './options';\n\nconst rootOptions = {\n    width: 1200,\n    height: 900,\n    maxScale: 1,\n    minScale: 0,\n    perspective: 1000,\n    transitionDuration: 1000\n};\n\nconst Slides = () => {\n    return (\n        <Impress progress={true} rootData={rootOptions} hint={false}>\n      {\n        options.map( (opt, index ) => {\n          return (\n            React.createElement( Step, {\n              id: opt.id,\n              className: opt.className,\n              data: opt.data,\n              key: index\n            },\n\n            opt.content.map( (child, index) => {\n              return (\n                React.cloneElement( child, {\n                  id: child.id,\n                  className: child.className,\n                  key: index\n                })\n              );\n            }))\n          );\n        })\n      }\n      </Impress>\n    );\n}\n\nexport { Slides };","import React from 'react';\n\nimport { Slides } from './components/slides';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Slides />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}